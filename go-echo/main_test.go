package main

import (
	"fmt"
	"net/http"
	"os"
	"testing"
	//	"encoding/json"
	echo "github.com/labstack/echo/v4"
	echo_middleware "github.com/labstack/echo/v4/middleware"
	"github.com/stretchr/testify/assert"
	//	"github.com/stretchr/testify/require"

	"github.com/deepmap/oapi-codegen/pkg/middleware"
	"github.com/deepmap/oapi-codegen/pkg/testutil"
	api "github.com/ioggstream/simple/api"
)

type Error struct {
	Message string `json:"message,omitempty"`
}

var e *echo.Echo
var app *api.MyApplication

func TestMain(m *testing.M) {
	// Here, we Initialize echo
	e = echo.New()

	// Now, we create our empty pet app
	app = api.CreateApplication()

	// Get the swagger description of our API
	swagger, _ := api.GetSwagger()

	// This disables swagger server name validation. It seems to work poorly,
	// and requires our test server to be in that list.
	swagger.Servers = nil

	// Validate requests against the OpenAPI spec
	e.Use(middleware.OapiRequestValidator(swagger))
	e.Use(echo_middleware.Logger())
	e.HTTPErrorHandler = api.ProblemErrorHandler

	// We register the autogenerated boilerplate and bind our app to this
	// echo router.
	api.RegisterHandlers(e, app)

	// run tests
	code := m.Run()
	os.Exit(code)
}

func Test404(t *testing.T) {
	var err error
	result := testutil.NewRequest().Get("/missing").WithAcceptJson().Go(t, e)
	assert.Equal(t, http.StatusNotFound, result.Code())

	var error api.Problem
	var bytes []byte
	err = result.UnmarshalBodyToObject(&error)
	assert.NoError(t, err, "Cannot parse response", err)
	fmt.Println("Error response: ", error, bytes)
}

func TestEcho(t *testing.T) {
	// We should get a 404 on invalid ID
	result := testutil.NewRequest().Get("/echo").WithAcceptJson().Go(t, e)
	bytes := result.Recorder.Body.Bytes()

	assert.Equal(t, http.StatusOK, result.Code())
	var ts api.Timestamps
	err := result.UnmarshalBodyToObject(&ts)
	assert.NoError(t, err, "error parsing response", bytes)

}

func TestStatus(t *testing.T) {
	result := testutil.NewRequest().Get("/status").WithAcceptJson().Go(t, e)
	bytes := result.Recorder.Body.Bytes()

	assert.Equal(t, http.StatusOK, result.Code())
	var ts api.Problem
	err := result.UnmarshalBodyToObject(&ts)
	assert.NoError(t, err, "error parsing response", bytes)
}
